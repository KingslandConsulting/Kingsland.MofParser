; A.1 Value definitions

primitiveTypeValue = literalValue / literalValueArray

literalValueArray  = "{" [ literalValue *( "," literalValue ) ] "}"

literalValue       = integerValue / realValue /
					 stringValue / octetStringValue
					 booleanValue /
					 nullValue /
					 dateTimeValue

complexTypeValue  = complexValue / complexValueArray

complexValueArray = "{" [ complexValue *( "," complexValue) ] "}"

complexValue      = ( INSTANCE / VALUE ) OF
                    ( structureName / className / associationName )
					[ alias ] propertyValueList

propertyValueList = "{" *propertySlot "}" 

propertySlot      = propertyName "=" propertyValue ";"

propertyValue     = primitiveTypeValue / complexTypeValue / 
                    referenceTypeValue / enumTypeValue

alias = AS aliasIdentifier

INSTANCE          = "instance" ; keyword: case insensitive

VALUE             = "value"    ; keyword: case insensitive

AS                = "as"       ; keyword: case insensitive

OF                = "of"       ; keyword: case insensitive




; A.2 MOF specification

mofSpecification = *mofProduction

mofProduction    = compilerDirective /
                   structureDeclaration / 
				   classDeclaration / 
				   associationDeclaration / 
				   enumerationDeclaration / 
				   instanceDeclaration / 
				   qualifierDeclaration




; A.3 Compiler directive

compilerDirective  = PRAGMA ( pragmaName / standardPragmaName ) 
                     "(" pragmaParameter ")"

pragmaName         = IDENTIFIER 

standardPragmaName = INCLUDE 

pragmaParameter    = stringValue ; if the pragma is INCLUDE, 
                                 ; the parameter value 
						         ; shall represent a relative 
							     ; or full file path 

PRAGMA = "#pragma"               ; keyword: case insensitive 

INCLUDE = "include"              ; keyword: case insensitive




; A.4 Structure declaration

structureDeclaration = [ qualifierList ] STRUCTURE structureName 
                       [ superstructure ] 
					   "{" *structureFeature "}" ";"

structureName        = elementName 

superStructure       = ":" structureName 

structureFeature     = structureDeclaration / ; local structure 
                       enumDeclaration /      ; local enumeration 
				       propertyDeclaration

STRUCTURE            = "structure"            ; keyword: case insensitive




; A.5 Class declaration

classDeclaration = [ qualifierList ] CLASS className [ superClass ]
                   "{" *classFeature "}" ";"
				   
className        = elementName 

superClass       = ":" className 

classFeature     = structureFeature / 
                   methodDeclaration 
				   
CLASS            = "class"               ; keyword: case insensitive




; A.6 Association declaration

associationDeclaration = [ qualifierList ] ASSOCIATION associationName 
                         [ superAssociation ] 
						 "{" * classFeature "}" ";"
						 
associationName        = elementName 

superAssociation       = ":" elementName

ASSOCIATION            = "association" ; keyword: case insensitive




; A.7 Enumeration declaration

enumDeclaration        = enumTypeHeader 
                         enumName ":" enumTypeDeclaration ";"
				  
enumTypeHeader         = [ qualifierList ] ENUMERATION 

enumName               = elementName 

enumTypeDeclaration    = ( DT_Integer / integerEnumName )
                         integerEnumDeclaration /
	   	                 ( DT_STRING / stringEnumName ) 
		   			     stringEnumDeclaration 
					  
integerEnumName        = enumName 

stringEnumName         = enumName 

integerEnumDeclaration = "{" [ integerEnumElement 
                         *( "," integerEnumElement ) ] "}"
						 
stringEnumDeclaration  = "{" [ stringEnumElement
                         *( "," stringEnumElement ) ] "}"
						 
integerEnumElement     = [ qualifierList ] enumLiteral "=" integerValue 

stringEnumElement      = [ qualifierList ] enumLiteral [ "=" stringValue ] 

enumLiteral            = IDENTIFIER 

ENUMERATION            = "enumeration" ; keyword: case insensitive




; A.8 Qualifier type declaration

qualifierTypeDeclaration = [ qualifierList ] 
                           QUALIFIER qualifierName ":" qualifierType 
						   qualifierScope [ qualifierPolicy ] ";" 
						   
qualifierName            = elementName 

qualifierType            = primitiveQualifierType / enumQualiferType 

primitiveQualifierType   = primitiveType [ array ] 
                           [ "=" primitiveTypeValue ] ";"
						 
enumQualiferType         = enumName [ array ] "=" enumTypeValue ";"

qualifierScope           = SCOPE "(" ANY / scopeKindList ")"

qualifierPolicy          = POLICY "(" policyKind ")"

policyKind               = DISABLEOVERRIDE / 
                           ENABLEOVERRIDE / 
                           RESTRICTED 
			 
scopeKindList            = scopeKind *( "," scopeKind ) 

scopeKind                = STRUCTURE / CLASS / ASSOCIATION / 
                           ENUMERATION / ENUMERATIONVALUE / 
		                   PROPERTY / REFPROPERTY / 
			               METHOD / PARAMETER / 
		                   QUALIFIERTYPE 

SCOPE                    = "scope"            ; keyword: case insensitive 

ANY                      = "any"              ; keyword: case insensitive 

POLICY                   = "policy"           ; keyword: case insensitive 

ENABLEOVERRIDE           = "enableoverride"   ; keyword: case insensitive 

DISABLEOVERRIDE          = "disableoverride"  ; keyword: case insensitive 

RESTRICTED               = "restricted"       ; keyword: case insensitive 

ENUMERATIONVALUE         = "enumerationvalue" ; keyword: case insensitive 

PROPERTY                 = "property"         ; keyword: case insensitive 

REFPROPETY               = "reference"        ; keyword: case insensitive 

METHOD                   = "method"           ; keyword: case insensitive 

PARAMETER                = "parameter"        ; keyword: case insensitive 

QUALIFIERTYPE            = "qualifiertype"    ; keyword: case insensitive




; A.9 Qualifier list

qualifierList                 = "[" qualifierValue *( "," qualifierValue ) "]" 

qualifierValue                = qualifierName [ qualifierValueInitializer / 
                                qualiferValueArrayInitializer ] 

qualifierValueInitializer     = "(" literalValue ")"

qualiferValueArrayInitializer = "{" literalValue *( "," literalValue ) "}"




; A.10 Property declaration

propertyDeclaration          = [ qualifierList ] ( primitivePropertyDeclaration / 
                               complexPropertyDeclaration / 
					           enumPropertyDeclaration / 
					           referencePropertyDeclaration ) ";" 

primitivePropertyDeclaration = primitiveType propertyName [ array ] 
                               [ "=" primitiveTypeValue ] 
							   
complexPropertyDeclaration   = structureOrClassName propertyName [ array ] 
                               [ "=" ( complexTypeValue / aliasIdentifier ) ] 

enumPropertyDeclaration      = enumName propertyName [ array ]
                               [ "=" enumTypeValue ] 
						  
referencePropertyDeclaration = classReference propertyName [ array ] 
                               [ "=" referenceTypeValue ] 
							   
array                        = "[" "]" 

propertyName                 = IDENTIFIER 

structureOrClassName         = IDENTIFIER 

REF                          = "ref" ; keyword: case insensitive




; A.11 Method declaration

methodDeclaration = [ qualifierList ] ( ( returnDataType [ array ] ) / 
                    VOID ) methodName 
					"(" [ parameterList ] ")" ";" 
					
returnDataType    = primitiveType / 
                    structureOrClassName / 
                    enumName / 
		            classReference 

methodName        = IDENTIFIER 

classReference    = DT_REFERENCE 

VOID              = "void" ; keyword: case insensitive 

parameterList     = parameterDeclaration *( "," parameterDeclaration )




; A.12 Parameter declaration

parameterDeclaration      = [ qualifierList ] ( primitiveParamDeclaration / 
                            complexParamDeclaration / 
					        enumParamDeclaration / 
					        referenceParamDeclaration ) 
					   
primitiveParamDeclaration = primitiveType parameterName [ array ] 
                            [ "=" primitiveTypeValue ] 
							
complexParamDeclaration   = structureOrClassName parameterName [ array ] 
                            [ "=" ( complexTypeValue / aliasIdentifier ) ] 
						  
enumParamDeclaration      = enumName parameterName [ array ] 
                            [ "=" enumValue ] 

referenceParamDeclaration = classReference parameterName [ array ] 
                            [ "=" referenceTypeValue ] 
							
parameterName             = IDENTIFIER




; A.13 Names

IDENTIFIER          = firstIdentifierChar *( nextIdentifierChar )

firstIdentifierChar = UPPERALPHA / LOWERALPHA / UNDERSCORE 

nextIdentifierChar  = firstIdentifierChar / decimalDigit 

elementName         = localName / schemaQualifiedName 

localName           = IDENTIFIER




; A.13.1 Schema-qualified name

schemaQualifiedName = schemaName UNDERSCORE IDENTIFIER 

schemaName          = firstSchemaChar *( nextSchemaChar )

firstSchemaChar     = UPPERALPHA / LOWERALPHA

nextSchemaChar      = firstSchemaChar / decimalDigit



; A.13.2 Alias identifier

aliasIdentifier = "$" IDENTIFIER




; A.13.3 Namespace name

namespaceName = IDENTIFIER *( "/" IDENTIFIER )




; A.14 Complex type value

complexTypeValue  = complexValue / complexValueArray 

complexValueArray = "{" [ complexValue *( "," complexValue) ] "}"

complexValue      = ( INSTANCE / VALUE ) [OF] 
                    ( structureName / className / associationName ) 
			        [ alias ] propertyValueList ";" 
			   
propertyValueList = "{" *propertySlot "}" 

propertySlot      = propertyName "=" propertyValue ";" 

propertyValue     = primitiveTypeValue / complexTypeValue / 
                    referenceTypeValue / enumTypeValue 
				
alias             = AS aliasIdentifier 

INSTANCE          = "instance" ; keyword: case insensitive 

VALUE             = "value" ; keyword: case insensitive 

AS                = "as" ; keyword: case insensitive 

OF                = "of" ; keyword: case insensitive




; A.15 Primitive data types

primitiveType      = DT_Integer / 
                     DT_Real /
				     DT_STRING / 
                     DT_DATETIME / 
				     DT_BOOLEAN / 
				     DT_OCTETSTRING 

DT_Integer         = DT_UnsignedInteger / 
                     DT_SignedInteger 
			 
DT_Real            = DT_REAL32 / 
                     DT_REAL64 / 

DT_UnsignedInteger = DT_UINT8 / 
                     DT_UINT16 / 
					 DT_UINT32 / 
					 DT_UINT64 
					 
DT_SignedInteger   = DT_SINT8 / 
                     DT_SINT16 / 
                     DT_SINT32 / 
				     DT_SINT64 
				   
DT_UINT8           = "uint8"       ; keyword: case insensitive 
DT_UINT16          = "uint16"      ; keyword: case insensitive 
DT_UINT32          = "uint32"      ; keyword: case insensitive 
DT_UINT64          = "uint64"      ; keyword: case insensitive 
DT_SINT8           = "sint8"       ; keyword: case insensitive 
DT_SINT16          = "sint16"      ; keyword: case insensitive 
DT_SINT32          = "sint32"      ; keyword: case insensitive 
DT_SINT64          = "sint64"      ; keyword: case insensitive 
DT_REAL32          = "real32"      ; keyword: case insensitive 
DT_REAL64          = "real64"      ; keyword: case insensitive 
DT_STRING          = "string"      ; keyword: case insensitive 
DT_DATETIME        = "datetime"    ; keyword: case insensitive 
DT_BOOLEAN         = "boolean"     ; keyword: case insensitive 
DT_OCTETSTRING     = "octetstring" ; keyword: case insensitive




; A.16 Reference data type

DT_REFERENCE = className REF 

REF          = "ref" ; keyword: case insensitive




; A.17 Primitive type values

primitiveTypeValue = literalValue / literalValueArray 

literalValueArray  = "{" [ literalValue *( "," literalValue ) ] "}"

literalValue       = integerValue / 
                     realValue / 
			         dateTimeValue / 
			         stringValue / 
			         booleanValue / 
			         octetStringValue / 
			         nullValue




; A.17.1 Integer value

integerValue = binaryValue / octalValue / hexValue / decimalValue 

binaryValue          = [ "+" / "-" ] 1*binaryDigit ( "b" / "B" )

binaryDigit          = "0" / "1" 

octalValue           = [ "+" / "-" ] unsignedOctalValue 

unsignedOctalValue   = "0" 1*octalDigit

octalDigit           = "0" / "1" / "2" / "3" / "4" / "5" / "6" / "7" 

hexValue             = [ "+" / "-" ] ( "0x" / "0X" ) 1*hexDigit

hexDigit             = decimalDigit / "a" / "A" / "b" / "B" / "c" / "C" / 
                       "d" / "D" / "e" / "E" / "f" / "F"
		   
decimalValue         = [ "+" / "-" ] unsignedDecimalValue 

unsignedDecimalValue = positiveDecimalDigit *decimalDigit




; A.17.2 Real value

realValue            = [ "+" / "-" ] *decimalDigit "." 1*decimalDigit
                       [ ( "e" / "E" ) [ "+" / "-" ] 1*decimalDigit ] 
			
decimalDigit         = "0" / positiveDecimalDigit 

positiveDecimalDigit = 1"..."9"




; A.17.3 String values

stringValue          = DOUBLEQUOTE *stringChar DOUBLEQUOTE 
                       *( *WS DOUBLEQUOTE *stringChar DOUBLEQUOTE ) 

stringChar           = stringUCSchar / stringEscapeSequence

stringUCSchar        = U+0020...U+0021 / U+0023...U+D7FF / 
                       U+E000...U+FFFD / U+10000...U+10FFFF
			           ; Note that these UCS characters can be
				       ; represented in XML without any escaping
				       ; (see W3C XML).
				
stringEscapeSequence = BACKSLASH ( BACKSLASH / DOUBLEQUOTE / SINGLEQUOTE / 
                       BACKSPACE_ESC / TAB_ESC / LINEFEED_ESC / 
					   FORMFEED_ESC / CARRIAGERETURN_ESC / 
					   escapedUCSchar ) 

BACKSPACE_ESC        = "b"       ; escape for back space (U+0008)

TAB_ESC              = "t"       ; escape for horizontal tab (U+0009)

LINEFEED_ESC         = "n"       ; escape for line feed (U+000A)

FORMFEED_ESC         = "f"       ; escape for form feed (U+000C) 

CARRIAGERETURN_ESC   = "r"       ; escape for carriage return (U+000D)

escapedUCSchar       = ( "x" / "X" ) 1*6( hexDigit ) ; escaped UCS 1106
                                                     ; character with a UCS code position that is
										             ; the numeric value of the hex number




; A.17.4 Special characters

BACKSLASH   = U+005C          ; \

DOUBLEQUOTE = U+0022          ; "

SINGLEQUOTE = U+0027          ; '

UPPERALPHA  = U+0041...U+005A ; A ... Z 

LOWERALPHA  = U+0061...U+007A ; a ... z

UNDERSCORE  = U+005F          ; _




; A.17.5 OctetString value

octetStringValue        = DOUBLEQUOTE "0x" *( octetStringElementValue ) 
                          DOUBLEQUOTE 
				          *( *WS DOUBLEQUOTE *( octetStringElementValue )
				          DOUBLEQUOTE )

octetStringElementValue = 2(hexDigit)




; A.17.6 Boolean value

booleanValue = TRUE / FALSE 

FALSE        = "false" ; keyword: case insensitive 

TRUE         = "true"  ; keyword: case insensitive 1128




; A.17.7 Null value

nullValue = NULL 

NULL      = "null" ; keyword: case insensitive
            ; second




; A.17.8 File path 

filePath           = [absoluteFilePrefix] relativeFilePath

relativeFilePath   = IDENTIFIER *( pathDelimiter IDENTIFIER) 

pathDelimiter      = "/" / "\"

absoluteFilePrefix = rootDirectory / 
                     driveLetter 

rootDirectory      = pathDelimiter

driveLetter        = UPPERALPHA ":" [pathDelimiter]




; A.18 Enum type value

enumTypeValue  = enumValue / enumValueArray 

enumValueArray = "{" [ enumName *( "," enumName ) ] "}"

enumValue      = [ enumName "." ] enumLiteral 

enumLiteral    = IDENTIFIER




; A.19 Reference type value

referenceTypeValue  = referenceValue / referenceValueArray 

referenceValueArray = "{" [ objectPathValue *( "," objectPathValue ) ] 
                      "}"

objectPathValue     = [namespacePath ":"] instanceId 

namespacePath       = [serverPath] namespaceName 

serverPath          = (host / LOCALHOST) [ ":" port] "/"

LOCALHOST           = "localhost" ; Case insensitive 

instanceId          = className "." instanceKeyValue 

instanceKeyValue    = keyValue *( "," keyValue ) 

keyValue            = propertyName "=" literalValue
